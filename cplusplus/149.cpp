#include "./utils.h"


class Solution {
public:
    int maxPoints(vector<vector<int>>& points)
    {
        int res = 0;
        int size = points.size();
        if (size == 0 || size == 1)
            return size;

        sort(points.begin(), points.end());

        for (int i = 0; i < size; i++) {
            // if start point is same to last point, then have no means to try
            if (i > 0 && points[i][0] == points[i - 1][0] && points[i][1] == points[i - 1][1])
                continue;
            int baseLen = 1;
            for (int j = i + 1; j < size; j++) {
                if (points[j][0] == points[i][0] && points[j][1] == points[i][1]) {
                    baseLen += 1;
                } else {
                    break;
                }
            }
            for (int j = i + baseLen; j < size; j++) {
                int len = baseLen + 1;
                // if the line is parellel to y-aixs
                if (points[i][0] == points[j][0]) {
                    for (int k = j + 1; k < size; k++) {
                        if (points[k][0] == points[j][0]) {
                            len += 1;
                        }
                    }
                }
                // if the line is parellel to x-aixs
                else if (points[i][1] == points[j][1]) {
                    for (int k = j + 1; k < size; k++) {
                        if (points[k][1] == points[j][1]) {
                            len += 1;
                        }
                    }
                }
                // simple line
                else {
                    for (int k = j + 1; k < size; k++) {
                        long long x = points[k][0];
                        long long y = points[k][1];
                        long long x1 = points[i][0];
                        long long y1 = points[i][1];
                        long long x2 = points[j][0];
                        long long y2 = points[j][1];
                        if ((x - x1) * (y2 - y1) == (y - y1) * (x2 - x1)) {
                            len += 1;
                        }
                    }
                }
                res = max(res, len);
            }
            res = max(res, baseLen);
        }
        return res;
    }
};


int main(int argc, const char** argv) {
    vector<vector<int>> lists = {{-240,-657},{-27,-188},{-616,-247},{-264,-311},{-352,-393},{-270,-748},{3,4},{-308,-87},{150,526},{0,-13},{-7,-40},{-3,-10},{-531,-892},{-88,-147},{4,-3},{-873,-555},{-582,-360},{-539,-207},{-118,-206},{970,680},{-231,-47},{352,263},{510,143},{295,480},{-590,-990},{-236,-402},{308,233},{-60,-111},{462,313},{-270,-748},{-352,-393},{-35,-148},{-7,-40},{440,345},{388,290},{270,890},{10,-7},{60,253},{-531,-892},{388,290},{-388,-230},{340,85},{0,-13},{770,473},{0,73},{873,615},{-42,-175},{-6,-8},{49,176},{308,222},{170,27},{-485,-295},{170,27},{510,143},{-18,-156},{-63,-316},{-28,-121},{396,304},{472,774},{-14,-67},{-5,7},{-485,-295},{118,186},{-154,-7},{-7,-40},{-97,-35},{4,-9},{-18,-156},{0,-31},{-9,-124},{-300,-839},{-308,-352},{-425,-176},{-194,-100},{873,615},{413,676},{-90,-202},{220,140},{77,113},{-236,-402},{-9,-124},{63,230},{-255,-118},{472,774},{-56,-229},{90,228},{3,-8},{81,196},{970,680},{485,355},{-354,-598},{-385,-127},{-2,7},{531,872},{-680,-263},{-21,-94},{-118,-206},{616,393},{291,225},{-240,-657},{-5,-4},{1,-2},{485,355},{231,193},{-88,-147},{-291,-165},{-176,-229},{154,153},{-970,-620},{-77,33},{-60,-111},{30,162},{-18,-156},{425,114},{-177,-304},{-21,-94},{-10,9},{-352,-393},{154,153},{-220,-270},{44,-24},{-291,-165},{0,-31},{240,799},{-5,-9},{-70,-283},{-176,-229},{3,8},{-679,-425},{-385,-127},{396,304},{-308,-352},{-595,-234},{42,149},{-220,-270},{385,273},{-308,-87},{-54,-284},{680,201},{-154,-7},{-440,-475},{-531,-892},{-42,-175},{770,473},{118,186},{-385,-127},{154,153},{56,203},{-616,-247}};
    printf("%d\n", Solution().maxPoints(lists));
    return 0;
}
